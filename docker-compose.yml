# Указываем версию синтаксиса Docker Compose (3.8 - достаточно современная)
version: '3.8' 

# Определяем сервисы (контейнеры), которые составляют наше приложение
services: 

  # Даем имя нашему сервису (можно выбрать любое, например, 'web' или 'app')
  mnist-app: 
    # Инструкция по сборке образа для этого сервиса
    build: 
      # Указываем контекст сборки - текущая директория (где лежит Dockerfile)
      context: . 
      # (Опционально) Если бы Dockerfile назывался не 'Dockerfile', указали бы здесь:
      # dockerfile: Dockerfile 
    
    # Имя, которое будет присвоено контейнеру после запуска (для удобства)
    container_name: mnist_recognizer_app

    # Проброс портов: связываем порт 5000 на хост-машине (ваш компьютер)
    # с портом 5000 внутри контейнера (где работает Flask)
    ports:
      - "5000:5000" 

    # (Опционально) Проброс томов (volumes): Полезно для разработки.
    # Позволяет видеть изменения в коде внутри контейнера без пересборки образа.
    # Сейчас закомментировано, т.к. нам важнее проверить сборку образа.
    # volumes:
    #   - ./MnistFlaskDockerApp:/app/MnistFlaskDockerApp  # Папка с кодом приложения
    #   - ./runserver.py:/app/runserver.py # Файл запуска

    # Политика перезапуска контейнера. 'unless-stopped' означает, что контейнер 
    # будет автоматически перезапускаться, если он упадет из-за ошибки,
    # но не будет запускаться сам после перезагрузки Docker или компьютера, 
    # если вы остановили его вручную (командой docker-compose down).
    restart: unless-stopped 