# ---- Базовый образ ----
# Используем официальный образ Python 3.9 slim-версии (меньше по размеру)
FROM python:3.9-slim

# ---- Метаданные (опционально) ----
LABEL maintainer="Your Name <your.email@example.com>" 
LABEL description="Flask app for MNIST digit recognition"

# ---- Установка рабочей директории ----
# Устанавливаем /app как рабочую папку внутри контейнера
WORKDIR /app

# ---- Установка зависимостей ----
# Копируем ТОЛЬКО файл с зависимостями сначала, чтобы Docker мог кешировать этот слой,
# если зависимости не меняются, это ускоряет пересборку образа.
COPY requirements.txt . 
# Устанавливаем зависимости, указанные в requirements.txt
# --no-cache-dir чтобы не сохранять кеш pip, уменьшая размер образа
# --trusted-host pypi.python.org --trusted-host pypi.org --trusted-host files.pythonhosted.org может понадобиться при проблемах с сетью/сертификатами, пока оставляем без них
RUN pip install --no-cache-dir -r requirements.txt

# ---- Копирование кода приложения ----
# Копируем ВЕСЬ ОСТАЛЬНОЙ код проекта в рабочую директорию /app внутри контейнера
# ВАЖНО: Убедитесь, что файл .dockerignore (создадим следующим шагом) существует, 
# чтобы не копировать лишнее (например, папку env).
COPY . . 

# ---- Указание порта ----
# Сообщаем Docker, что контейнер будет слушать порт 5000
EXPOSE 5000

# ---- Команда запуска ----
# Указываем команду, которая будет запущена при старте контейнера.
# Мы используем runserver.py, который запускает встроенный сервер Flask.
# Для production среды здесь лучше использовать gunicorn или uwsgi.
CMD ["python", "runserver.py"]